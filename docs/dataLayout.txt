we have a big game object which contains the game state, there is always a level
present and it's data is just sitting in there, and then you can have a menu on
top.

So, walls are not created or destroyed really within the game, so they can just
be in a fixed array that is allocated when the level is loaded in.
Dudes on the other hand are created reasonably frequently, and iterated over
frequently, so we need a data structure that allows us to add and remove them
and their children quickly, and also lets us iterate over them efficiently
without having to skip over unallocated items in a pool etc.

Also should note that we are going to have to create lots of instances of the
same dude objects, so we will probably need to have a system where a prototype
is stored somewhere and then when we go to create one it just creates a
duplicate of it and it's child nodes.







For the function that loads in the mesh. later we'll pass in a material store
but that's not a big deal rn. The function will take some callbacks. First there
is a callback that tells you the number of meshes so you can allocate some
memory or whatever, then it calls a callback for each mesh, and you can pass a
pointer to your state object or whatever.